---
- name: Separate block devices and directory paths
  ansible.builtin.set_fact:
    block_devices: "{{ data_disks + parity_disks + cache_disks | select('match', '^/dev/') | list }}"
    directory_paths: "{{ cache_disks | reject('match', '^/dev/') | list }}"

- name: Debug block devices and directory paths
  ansible.builtin.debug:
    msg:
      - "Block devices: {{ block_devices }}"
      - "Directory paths: {{ directory_paths }}"

- name: Get partition information for block devices
  ansible.builtin.command: lsblk -nlo NAME,TYPE {{ item }}
  loop: "{{ block_devices }}"
  register: partition_info
  changed_when: false

- name: Set facts for partitioned and non-partitioned disks
  ansible.builtin.set_fact:
    partitioned_disks: "{{ partition_info.results | selectattr('stdout', 'search', 'part') | map(attribute='item') | list }}"
    non_partitioned_disks: "{{ partition_info.results | rejectattr('stdout', 'search', 'part') | map(attribute='item') | list }}"

- name: Debug partitioned and non-partitioned disks
  ansible.builtin.debug:
    msg:
      - "Partitioned disks: {{ partitioned_disks }}"
      - "Non-partitioned disks: {{ non_partitioned_disks }}"

- name: Initialize cache_disks_only and cache_paths_only variables
  ansible.builtin.set_fact:
    cache_disks_only: "{{ cache_disks | select('match', '^/dev/') | list }}"
    cache_paths_only: "{{ directory_paths }}"

- name: Debug cache_disks_only and cache_paths_only
  ansible.builtin.debug:
    msg:
      - "Cache disks: {{ cache_disks_only }}"
      - "Cache paths: {{ cache_paths_only }}"

- name: Check filesystem type for data disks
  ansible.builtin.command: lsblk -f {{ item }} -n -o FSTYPE
  loop: "{{ data_disks }}"
  register: data_disks_fs_check_results

- name: Identify non-BTRFS data disks
  ansible.builtin.set_fact:
    non_btrfs_disks: "{{ non_btrfs_disks | default([]) + [item.item] }}"
  loop: "{{ data_disks_fs_check_results.results }}"
  when:
    - "'btrfs' not in item.stdout"

- name: Check filesystem type for cache and parity disks
  ansible.builtin.command: lsblk -f {{ item }} -n -o FSTYPE
  loop: "{{ cache_disks_only + parity_disks }}"
  register: cache_parity_disks_fs_check_results

- name: Identify non-EXT4 cache and parity disks
  ansible.builtin.set_fact:
    non_ext4_disks: "{{ non_ext4_disks | default([]) + [item.item] }}"
  loop: "{{ cache_parity_disks_fs_check_results.results }}"
  when:
    - "'ext4' not in item.stdout"

- name: Set disks_to_wipe
  ansible.builtin.set_fact:
    disks_to_wipe: "{{ (non_btrfs_disks | default([])) + (non_ext4_disks | default([])) }}"

- name: Debug non_btrfs_disks, non_ext4_disks, and disks_to_wipe
  ansible.builtin.debug:
    msg:
      - "Non-BTRFS disks: {{ non_btrfs_disks | default([]) }}"
      - "Non-EXT4 disks: {{ non_ext4_disks | default([]) }}"
      - "Disks to wipe: {{ disks_to_wipe }}"

- name: Fail if disks need to be wiped but wipe_and_setup is false
  ansible.builtin.fail:
    msg: >
      Disks need to be wiped and formatted, but wipe_and_setup is set to false.
      Please set wipe_and_setup to true to proceed.
  when:
    - disks_to_wipe | length > 0
    - not wipe_and_setup

- name: Prompt user for confirmation to wipe and reformat disks
  ansible.builtin.pause:
    prompt: |
      The following actions will be performed:
      - Wipe disk labels for:
        {% for disk in disks_to_wipe %}
        * {{ disk }}
        {% endfor %}
      - Create BTRFS filesystem on:
        {% for disk in non_btrfs_disks | default([]) %}
        * {{ disk }}
        {% endfor %}
      - Create EXT4 filesystem on:
        {% for disk in non_ext4_disks | default([]) %}
        * {{ disk }}
        {% endfor %}
      Existing cache paths:
        {% for path in cache_paths_only %}
        * {{ path }}
        {% endfor %}
      WARNING: This will result in data loss on the affected disks.
      Do you want to proceed? [y/N]:
  register: user_confirmation
  when:
    - (disks_to_wipe | length > 0) or (non_btrfs_disks | length > 0) or (non_ext4_disks | length > 0)
    - wipe_and_setup

- name: Fail if user does not confirm disk wiping
  ansible.builtin.fail:
    msg: >
      User did not confirm disk wiping.
      Playbook execution stopped.
  when:
    - (disks_to_wipe | length > 0) or (non_ext4_disks | length > 0) or (non_btrfs_disks | length > 0)
    - wipe_and_setup
    - user_confirmation.user_input | default('n') | lower != 'y'

- name: Unmount disks_to_wipe  # noqa ignore-errors
  ansible.builtin.command: sudo umount {{ item }}
  with_items: "{{ disks_to_wipe }}"
  when:
    - disks_to_wipe | length > 0
    - wipe_and_setup
    - user_confirmation.user_input | default('n') | lower == 'y'
  ignore_errors: true

- name: Wipe disk labels
  ansible.builtin.command: sudo wipefs -a {{ item }}
  with_items: "{{ disks_to_wipe }}"
  when:
    - disks_to_wipe | length > 0
    - wipe_and_setup
    - user_confirmation.user_input | default('n') | lower == 'y'

- name: Create BTRFS filesystem on data disks
  community.general.filesystem:
    fstype: btrfs
    dev: "{{ item }}"
  with_items: "{{ non_btrfs_disks | default([]) }}"
  when:
    - non_btrfs_disks | length > 0
    - wipe_and_setup
    - user_confirmation.user_input | default('n') | lower == 'y'

- name: Create EXT4 filesystem on cache and parity disks
  community.general.filesystem:
    fstype: ext4
    dev: "{{ item }}"
  with_items: "{{ non_ext4_disks | default([]) }}"
  when:
    - non_ext4_disks | length > 0
    - wipe_and_setup
    - user_confirmation.user_input | default('n') | lower == 'y'

- name: Get filesystem type for all disks  # noqa command-instead-of-shell
  ansible.builtin.shell: lsblk -f {{ item }}
  loop: "{{ data_disks + cache_disks_only + parity_disks }}"
  register: filesystem_types
  changed_when: false

- name: Print filesystem types
  ansible.builtin.debug:
    var: filesystem_types.results
